{
  "version": 3,
  "sources": ["../../../../Desktop/coding/portfolio/client/.netlify/functions-internal/emails/index.ts"],
  "sourceRoot": "C:/Users/lawri/AppData/Local/Temp/tmp-14776-BHXJpC4RN1Xa",
  "sourcesContent": ["import { Handler } from \"@netlify/functions\";\nimport fs from \"fs\";\nimport { join } from \"path\";\nimport https from \"https\";\n\nexport const getEmailFromPath = (\n  path: string\n): { file: string; type: string } | undefined => {\n  let fileFound: { file: string; type: string } | undefined;\n  fs.readdirSync(path).forEach((file) => {\n    if (fileFound !== undefined) {\n      // break after getting first file\n      return;\n    }\n    const fileType = file.split(\".\").pop();\n    const filename = file.replace(/^.*[\\\\/]/, \"\").split(\".\")[0];\n    if (filename === \"index\") {\n      if (fileType === \"mjml\" || fileType === \"html\") {\n        const fileContents = fs.readFileSync(`${path}/${file}`, \"utf8\");\n        fileFound = { file: fileContents, type: fileType };\n      }\n    }\n  });\n\n  return fileFound;\n};\n\ninterface IAttachment {\n  content: string;\n  filename: string;\n  type: string;\n}\n\nexport interface IEmailRequest {\n  from: string;\n  to: string;\n  subject: string;\n  html: string;\n  cc?: string;\n  bcc?: string;\n  attachments?: IAttachment[];\n}\n\ninterface IEmailConfig {\n  apiKey: string;\n  providerName: string;\n  mailgunDomain?: string;\n  mailgunHostRegion?: string;\n}\n\nexport interface IMailRequest {\n  configuration: IEmailConfig;\n  request: IEmailRequest;\n}\n\ninterface IFileFound {\n  file: string;\n  type: string;\n}\n\nexport interface IMissingConfig {\n  NETLIFY_EMAILS_SECRET?: boolean;\n  NETLIFY_EMAILS_PROVIDER?: boolean;\n  NETLIFY_EMAILS_PROVIDER_API_KEY?: boolean;\n  NETLIFY_EMAILS_MAILGUN_HOST_REGION?: boolean;\n  NETLIFY_EMAILS_MAILGUN_DOMAIN?: boolean;\n}\n\nexport interface IRenderRequest {\n  template: string;\n  siteId: string;\n  type: string;\n  showParameterDictionary: boolean;\n  parameters: { [key: string]: string | string[] };\n}\n\nconst allowedPreviewEnvironments = [\"deploy-preview\", \"branch-deploy\", \"dev\"];\n\nconst getMissingConfig = (): IMissingConfig | false => {\n  const missingConfig: IMissingConfig = {};\n  let validConfig = true;\n\n  if (!process.env.NETLIFY_EMAILS_PROVIDER) {\n    missingConfig.NETLIFY_EMAILS_PROVIDER = true;\n    validConfig = false;\n  }\n  if (!process.env.NETLIFY_EMAILS_PROVIDER_API_KEY) {\n    missingConfig.NETLIFY_EMAILS_PROVIDER_API_KEY = true;\n    validConfig = false;\n  }\n  if (process.env.NETLIFY_EMAILS_PROVIDER?.toLowerCase() === \"mailgun\") {\n    if (!process.env.NETLIFY_EMAILS_MAILGUN_HOST_REGION) {\n      missingConfig.NETLIFY_EMAILS_MAILGUN_HOST_REGION = true;\n      validConfig = false;\n    }\n    if (!process.env.NETLIFY_EMAILS_MAILGUN_DOMAIN) {\n      missingConfig.NETLIFY_EMAILS_MAILGUN_DOMAIN = true;\n      validConfig = false;\n    }\n  }\n  if (!process.env.NETLIFY_EMAILS_SECRET) {\n    missingConfig.NETLIFY_EMAILS_SECRET = true;\n    validConfig = false;\n  }\n\n  return validConfig ? false : missingConfig;\n};\n\nconst makeRenderTemplateRequest = async (\n  fileFound: IFileFound,\n  parameters: { [key: string]: string | string[] }\n): Promise<{\n  html?: string;\n  error?: string;\n  status: number;\n}> => {\n  const renderRequest: IRenderRequest = {\n    template: fileFound.file,\n    siteId: process.env.SITE_ID as string,\n    type: fileFound.type,\n    showParameterDictionary: false,\n    parameters,\n  };\n  return await new Promise((resolve, reject) => {\n    const renderReq = https.request(\n      {\n        hostname: \"netlify-integration-emails.netlify.app\",\n        path: \"/.netlify/functions/render\",\n        method: \"POST\",\n        headers: {\n          \"site-id\": process.env.SITE_ID as string,\n          \"Content-Type\": \"application/json\",\n        },\n      },\n      (res) => {\n        let data = \"\";\n\n        res.on(\"data\", (chunk) => {\n          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n          data += chunk;\n        });\n\n        res.on(\"end\", () => {\n          const response = JSON.parse(data) as {\n            html?: string;\n            error?: string;\n          };\n          resolve({ ...response, status: res.statusCode ?? 500 });\n        });\n      }\n    );\n\n    renderReq.on(\"error\", (error) => {\n      return reject(error);\n    });\n\n    renderReq.write(JSON.stringify(renderRequest));\n\n    renderReq.end();\n  });\n};\n\nconst makeSendEmailRequest = async (\n  mailRequest: IMailRequest\n): Promise<{\n  message: string;\n  status: number;\n}> => {\n  return await new Promise((resolve, reject) => {\n    const sendReq = https.request(\n      {\n        hostname: \"netlify-integration-emails.netlify.app\",\n        path: \"/.netlify/functions/send\",\n        method: \"POST\",\n        headers: {\n          \"site-id\": process.env.SITE_ID as string,\n          \"Content-Type\": \"application/json\",\n        },\n      },\n      (res) => {\n        let data = \"\";\n\n        res.on(\"data\", (chunk) => {\n          // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n          data += chunk;\n        });\n\n        res.on(\"end\", () => {\n          const response = JSON.parse(data) as {\n            message: string;\n          };\n          const sendEmailResponse = {\n            message: response.message,\n            status: res.statusCode ?? 500,\n          };\n          resolve(sendEmailResponse);\n        });\n      }\n    );\n\n    sendReq.on(\"error\", (error) => {\n      return reject(error);\n    });\n\n    sendReq.write(JSON.stringify(mailRequest));\n\n    sendReq.end();\n  });\n};\n\nconst handler: Handler = async (event) => {\n  console.log(`Email handler received email request from path ${event.rawUrl}`);\n  const missingConfig = getMissingConfig();\n\n  const providerApiKey = process.env.NETLIFY_EMAILS_PROVIDER_API_KEY as string;\n  const providerName = process.env.NETLIFY_EMAILS_PROVIDER as string;\n  const emailTemplatesDirectory =\n    process.env.NETLIFY_EMAILS_DIRECTORY ?? \"./emails\";\n\n  const emailPath = event.rawUrl.match(/emails\\/([A-z-]*)[?]?/)?.[1];\n\n  // If missing configuration, render preview HTML and sending missing configuration object to window varialbe\n  if (missingConfig) {\n    const missingConfigString = Object.keys(missingConfig)\n      .map((key) => {\n        if (missingConfig[key as keyof IMissingConfig]) {\n          return key;\n        }\n        return \"\";\n      })\n      .join(\", \");\n    console.error(\n      `Email handler detected missing configuration: ${missingConfigString}`\n    );\n\n    if (event.httpMethod === \"POST\") {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: `The emails integration is not configured correctly. We have detected the following configuration is missing: ${missingConfigString}`,\n        }),\n      };\n    }\n    return {\n      statusCode: 200,\n      body: `\n          <html>\n            <head>\n            <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n            <script>\n              missingConfig = ${JSON.stringify(missingConfig)}\n              siteId = ${JSON.stringify(process.env.SITE_ID)}\n              templateName = ${JSON.stringify(emailPath)}\n            </script>\n            <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n            </head>\n            <div id='app'></div>\n          </html>\n          `,\n    };\n  }\n\n  if (event.httpMethod === \"GET\") {\n    const showEmailPreview = allowedPreviewEnvironments.includes(\n      process.env.CONTEXT as string\n    );\n\n    if (!showEmailPreview) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: `Email previews are not allowed in the ${\n            process.env.CONTEXT as string\n          } environment`,\n        }),\n        headers: {\n          \"Content-Type\": \"text/plain\",\n        },\n      };\n    }\n\n    if (!fs.existsSync(emailTemplatesDirectory)) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: `Email templates directory ${emailTemplatesDirectory} does not exist`,\n        }),\n        headers: {\n          \"Content-Type\": \"text/plain\",\n        },\n      };\n    }\n\n    let emailTemplate: IFileFound | undefined;\n\n    if (emailPath !== undefined) {\n      if (!fs.existsSync(join(emailTemplatesDirectory, emailPath))) {\n        console.log(\n          `Preview path is not a valid email path - preview path received: ${emailPath}`\n        );\n        return {\n          statusCode: 200,\n          body: `\n              <html>\n                <head>\n                <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n                <script>\n                  missingTemplate = ${JSON.stringify(true)}\n                  siteId = ${JSON.stringify(process.env.SITE_ID)}\n                  templateName = ${JSON.stringify(emailPath)}\n                  emailDirectory = ${JSON.stringify(emailTemplatesDirectory)}\n                </script>\n                <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n                </head>\n                <div id='app'></div>\n              </html>\n              `,\n          headers: {\n            \"Content-Type\": \"text/html\",\n          },\n        };\n      }\n\n      emailTemplate = getEmailFromPath(\n        join(emailTemplatesDirectory, emailPath)\n      );\n\n      // If no email template found, return error\n      if (!emailTemplate) {\n        console.log(\n          `No email template found for preview path - preview path received: ${emailPath}. Please ensure that an index.mjml or index.html file exists in the email template folder.`\n        );\n        return {\n          statusCode: 200,\n          body: `\n              <html>\n                <head>\n                <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n                <script>\n                  missingTemplate = ${JSON.stringify(true)}\n                  siteId = ${JSON.stringify(process.env.SITE_ID)}\n                  templateName = ${JSON.stringify(emailPath)}\n                  emailDirectory = ${JSON.stringify(emailTemplatesDirectory)}\n                </script>\n                <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n                </head>\n                <div id='app'></div>\n              </html>\n              `,\n          headers: {\n            \"Content-Type\": \"text/html\",\n          },\n        };\n      }\n    }\n\n    const validEmailPaths: string[] = [];\n\n    fs.readdirSync(emailTemplatesDirectory).forEach((template) => {\n      if (\n        fs.existsSync(join(emailTemplatesDirectory, template, \"index.html\")) ||\n        fs.existsSync(join(emailTemplatesDirectory, template, \"index.mjml\"))\n      ) {\n        validEmailPaths.push(template);\n      }\n    });\n\n    return {\n      statusCode: 200,\n      body: `\n        <html>\n          <head>\n          <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n          <script>\n            emailPaths =  ${JSON.stringify(validEmailPaths)}\n            template = ${JSON.stringify(emailTemplate?.file)}\n            templateType = ${JSON.stringify(emailTemplate?.type)}\n            siteId = ${JSON.stringify(process.env.SITE_ID)}\n            siteName = ${JSON.stringify(process.env.SITE_NAME)}\n            provider = ${JSON.stringify(providerName)}\n            emailDirectory = ${JSON.stringify(emailTemplatesDirectory)}\n            secret = ${JSON.stringify(process.env.NETLIFY_EMAILS_SECRET)}\n            url = ${JSON.stringify(process.env.URL)}\n            templateName = ${JSON.stringify(emailPath)}\n          </script>\n          <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n          </head>\n          <div id='app'></div>\n        </html>\n        `,\n      headers: {\n        \"Content-Type\": \"text/html\",\n      },\n    };\n  }\n\n  if (event.httpMethod === \"POST\") {\n    if (!process.env.NETLIFY_EMAILS_SECRET) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Secret not set in NETLIFY_EMAILS_SECRET\",\n        }),\n      };\n    }\n\n    if (\n      event.headers[\"netlify-emails-secret\"] !==\n      process.env.NETLIFY_EMAILS_SECRET\n    ) {\n      return {\n        statusCode: 403,\n        body: JSON.stringify({\n          message: \"Secret does not match\",\n        }),\n      };\n    }\n\n    // If the email templates directory does not exist, return error\n    if (!fs.existsSync(emailTemplatesDirectory)) {\n      return {\n        statusCode: 404,\n        body: JSON.stringify({\n          message: `Email templates directory ${emailTemplatesDirectory} does not exist`,\n        }),\n      };\n    }\n\n    if (!event.body) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"Request body required\",\n        }),\n      };\n    }\n\n    const requestBody = JSON.parse(event.body);\n\n    if (!requestBody.from) {\n      console.log(\"From address is required\");\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"From address is required\",\n        }),\n      };\n    }\n    if (!requestBody.to) {\n      console.log(\"To address is required\");\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message: \"To address is required\",\n        }),\n      };\n    }\n\n    if (!emailPath) {\n      console.error(`Email path is not specified`);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          message:\n            \"You have not specified the email you wish to send in the URL\",\n        }),\n      };\n    }\n\n    const fullEmailPath = `${emailTemplatesDirectory}/${emailPath}`;\n\n    const emailPathExists = fs.existsSync(fullEmailPath);\n    if (!emailPathExists) {\n      console.error(`Email path does not exist: ${fullEmailPath}`);\n      return {\n        statusCode: 404,\n        body: JSON.stringify({\n          message: `Email path ${fullEmailPath} does not exist`,\n        }),\n      };\n    }\n\n    const email = getEmailFromPath(fullEmailPath);\n    if (!email) {\n      console.error(`No email file found in directory: ${fullEmailPath}`);\n      return {\n        statusCode: 404,\n        body: JSON.stringify({\n          message: `No email file found in directory: ${fullEmailPath}`,\n        }),\n      };\n    }\n\n    const renderResponseJson = await makeRenderTemplateRequest(\n      email,\n      requestBody.parameters\n    );\n\n    if (renderResponseJson.error ?? !renderResponseJson.html) {\n      console.error(\n        `Error rendering email template: ${JSON.stringify(renderResponseJson)}`\n      );\n      return {\n        statusCode: renderResponseJson.status,\n        body: JSON.stringify({\n          message: `Error rendering email template${\n            renderResponseJson.error ? `: ${renderResponseJson.error}` : \"\"\n          }`,\n        }),\n      };\n    }\n\n    const renderedTemplate = renderResponseJson.html;\n\n    const configuration: IEmailConfig = {\n      providerName,\n      apiKey: providerApiKey,\n      mailgunDomain: process.env.NETLIFY_EMAILS_MAILGUN_DOMAIN,\n      mailgunHostRegion: process.env.NETLIFY_EMAILS_MAILGUN_HOST_REGION,\n    };\n\n    const request: IEmailRequest = {\n      from: requestBody.from,\n      to: requestBody.to,\n      cc: requestBody.cc,\n      bcc: requestBody.bcc,\n      subject: requestBody.subject ?? \"\",\n      html: renderedTemplate,\n      attachments: requestBody.attachments,\n    };\n\n    const { message, status } = await makeSendEmailRequest({\n      configuration,\n      request,\n    });\n    if (status !== 200) {\n      console.error(`Error sending email: ${message}`);\n    }\n\n    return {\n      statusCode: status,\n      body: JSON.stringify({\n        message,\n      }),\n    };\n  }\n\n  return {\n    statusCode: 405,\n    body: JSON.stringify({\n      message: \"Method not allowed\",\n    }),\n  };\n};\n\nexport { handler };\n"],
  "mappings": "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",
  "names": []
}
